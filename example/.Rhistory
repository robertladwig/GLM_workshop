# "TOA_radiance" is the spectral radiance.
# Ri = Mi*Qi + Ai â Oi
# Ri = spectral radiance of band i (referred to as "TOA_radiance" in R script)
# Qi is the DN value for the quantized and calibrated standard product pixel of band i (referred to as "DN" in R script)
# Mi is the band-specific multiplicative rescaling factor for band i = 0.0003342
# Ai is the band-specific additive rescaling factor for band i (= 0.1 for Landsat 8)
# Oi is the offsets issued by USGS for the calibration of TIRS bands (= 0.29 for Landsat 8)*
# * However, according to USGS [14], the offset O10 of the images
# before February 3, 2014, is 0.29 for TIRS Band 10, and O10 of the images after
# February 3, 2014, should not be considered, because the USGS has reprocessed the data including that
# radiance offsets.
# Wang et al. 2015 Table 2. Constants for computing brightness temperature
# from Landsat 8 TIRS Band 10 data.
# A10 = 0.1
# O10 = 0.29  BEFORE February 3, 2014
# 010 = 0  AFTER February 3, 2014
# M10 = 0.0003342
# take into account whether scene is before Feb. 3, 2014, or Feb. 3, 2014 and after
# there is a "Date" column in each dataset
# 'ifelse' could work
# ifelse(test, yes, no)
# check that the format of the 'Date' is correct! "before February 3, 2014"
# df_thermal$TOA_radiance = ifelse((df_thermal$Date < '2014-02-03'), (0.0003342*df_thermal$DN + 0.1 - 0.29), (0.0003342*df_thermal$DN + 0.1))
# UPDATE: O10 is always zero. Do not distinguish between whether scene is before or after Feb. 3, 2014.
df_thermal$TOA_radiance = 0.0003342*df_thermal$DN + 0.1
# TOA radiance into TOA brightness temperature ####
# "TOA_brightness" is the effective at-satellite brightness temperature. (Qin et al.)
# new Wang et al. 2015 equation (Equation 8)
# T10 = K2/ ln(1 + K1 / R )
# T10 is the brightness temperature (K) of Band 10 (referred to as "TOA_brightness")
# K1 and K2 are the band-specific thermal conversion constants for Band 10 (Table 2)
# K1 = 774.89
# K2 = 1321.08 (K)
# R10 = spectral radiance of band 10
df_thermal$TOA_brightness = 1321.08/log(1 + (774.89 / df_thermal$TOA_radiance))
# Calculating saturation vapor pressure (es) ####
# es [hPa]=6.11*10^((7.5*T)/(237.3+T))
# Temperature is in degrees Celsius in this equation.
# https://www.weather.gov/media/epz/wxcalc/vaporPressure.pdf
es = 6.11*10^((7.5*air_temp)/(237.3+air_temp)) # you don't need to add a column in the data frame;
#es is just one value for one image; it's the same for each pixel; so a variable is sufficient, keep it short and call it es
# df_thermal$Air_Temp_C: I changed that to the selected air temperature data which matches with the acquisition date
# Calculating saturation mixing ratio (E) ####
# E (g/kg) = 621.97 * (es/ (Psta - es))
# es = saturation vapor pressure ("df_thermal$sat_vapor_pressure")
# https://www.weather.gov/media/epz/wxcalc/mixingRatio.pdf
# "Psta_hPa" is the column containing station pressure data as provided by DWD (in hPa).
E = 621.97*(es/(stat_pressure-es)) # I would always name the variables as short as possible and consistent with namings in the equations to avoid confusion
# Create a column with air temperature in Kelvin
# Converting "Air_Temp_C" from DWD WebWerdis to Kelvin
air_temp_K = air_temp + 273.15
# Create a column with station pressure in Pa
# DWD pressure data available in hPa
# Need air pressure in Pa for air density calculation
# multiply "Psta_hPa" with 100
stat_pressure_Pa = stat_pressure*100
# Calculating air density (kg/m^3) A ####
# A(dry air) = air pressure [Pa]/(287.05* Air Temperature[Â°K])
# Note that air density is in kg/m^3
A = stat_pressure_Pa/(287.05*air_temp_K)
# Calculating water vapor at ground station ####
# Wang et al. 2015 Equation 15
# w(0) = H*E*A/1000
# A = air density in (g/m^3) at the specific air temperature
# H = air humidity (%) at the ground
# E = saturation mix ratio (g/kg) of water vapor and air for a specific air temperature
w0 = (humidity * E * A)/1000
# Calculating atmospheric water vapour Rw0 ####
if(month >=4 & month <=10){
(Rw0 <- 0.6834)  # mid-latitude summer (Wang et al. 2015)
} else {(Rw0 <- 0.6356)   # mid-latitude winter (Wang et al. 2015)
}
# Wang et al. 2015: "Rw(0) = 0.6834 and Rw(0) = 0.6356 for mid-latitude summer and winter atmospheres, respectively"
# Why is this different from the Rw(0) values I used for Landsat 5 based on Qin et al. 2001? Should I use the values in Wang?
# KATJA: I would use the values proposed by Wang et al 2015;
# later, in case you write a paper, you will describe that you used Qin et al for L5 and Wang et al for L8;
# if you mix values of both papers you have to describe and explain it which complicates the method part;
# furthermore, Wang et al conducted their atmospheric modelling for providing constants for L8 with the described settings.
# So I say better use the values provided by Wang et al. to be consistent with their modelling.
# calculating atmospheric water vapor content (w) ####
# Equation 14 (Wang et al. 2015)
w <- w0/Rw0  # atmospheric water vapour content
# Calculating atmospheric transmittance (t) with water vapor ####
# Wang et al. 2015
# Table 6; Estimation of atmospheric transmittance for the Landsat 8 TIRS bands
# First, you must classify whether it is "Mid-latitude summer" or "Mid-latitude winter."
# Then, for each season, there are three categories of water vapor content (w), leading to different transmittance estimation equations.
# w between 0.2 and 1.6 [can simplify as being less than 1.6]
# w between 1.6 and 4.4
# w between 4.4 and 5.4 [can simplify as being greater than 4.4]
ifelse(month>=4 & month<=10,
ifelse(w<1.6, t <- 0.9184-0.0725*w,
ifelse(w>=1.6 & w < 4.4, t <- 1.0163-0.1330*w, t <- 0.7029-0.0620*w)),
ifelse(w>=0.2 & w<=1.4, t <- 0.9228-0.0735*w, t <- 0.9228-0.0735*w)) # winter
# Only the following water vapor range is given for "Mid-latitude winter": "0.2-1.4". What happens if you go outside of it?
# emissivity of the Earth's surface ####
e = 0.991
# Table 8: Emissivity of representative terrestrial materials for the Landsat 8 TIRS Band 10.
# water = 0.991
# Calculating c ####
# c = e*t
# part of Qin et al. 2001 Equation 24
df_thermal$c = e * t
# In Wang et al. 2015, this is equation 4.
# C10 = t10 * e10
# t10 = atmospheric transmittance of Landsat 8 TIRS Band 10
# e10 = the ground emissivity for the band
# Calculating d ####
# d = (1-t)*[1+(1-e)*t]
# part of Qin et al. 2001 Equation 24
df_thermal$d = (1-t) * (1+((1-e)*t))
# Wang et al. 2015, equation 5
# d10 = (1- t10)*[1 + (1-e10)*t10]
# looks exactly like Qin et al. Equation 24
# Calculating Ta (effective mean atmospheric temperature) ####
# Qin et al. 2001 Equations 32c and 32d
# Mid-latitude summer: 1 April to 31 October (days of the year: 91 - 304)
# Mid-latitude winter: 1 November to 31 March (days of the year: 305-365; 0-90)
# Wang et al. 2015 also recommends Qin et al. 2001's equations for Ta (see Table 3, Wang et al. 2015).
if (month >= 4 & month <= 10) {Ta<- 16.0110 + (0.92621*air_temp_K)} else {Ta <- 19.2704 + (0.91118*air_temp_K)}
# Qin et al. 2001 Equation 24
# Coefficients a10 and b10 ####
# Table 1, Wang et al. 2015
# Assuming the temperature range of 0 C to 50 C
a = -62.7182 # a10
b = 0.4339   #b10
# For a10 and b10 (Landsat 8), refer to Table 1 (Wang et al. 2015).
#From Table 1 (Wang et al. 2015), there are three possible temperature ranges in order to determine the coefficients a10 and b10:
#â20 C-70 Câ, â0 C-50 Câ, and â-20 C-30 C.â
#(For Landsat 5, I used the temperature range 0-30 from Qin et al. 2001 for these coefficients).
# KATJA: "Try analyzing a couple of scenes with different temperature ranges for the coefficients and compare. (0 to 50 C versus -20 to 30 C)."
# I think I should also look at the air temperature for my scenes:
# How many scenes with air temperature above 30 C?
# How many scenes with air temperature below 0 C?
# Ts = surface temperature (K) ####
df_thermal$Ts_K<- (a*(1-df_thermal$c-df_thermal$d) + (b*(1- df_thermal$c- df_thermal$d) + df_thermal$c + df_thermal$d)*df_thermal$TOA_brightness-(df_thermal$d*Ta))/df_thermal$c
# This looks like the same equation from Wang et al. 2015, except using Landsat 8 Band 10.
# T10 is the brightness temperature of Landsat 8 TIRS Band 10 data.
# Ts in degrees C ####
df_thermal$Ts_C <- df_thermal$Ts_K-273.15
### conversion to raster and save to file
keep_LST = c("Longitude", "Latitude", "Ts_C")
LST_df = df_thermal[keep_LST]
Ts_raster <- rasterFromXYZ(LST_df, crs='+proj=utm +zone=33 +ellps=WGS84 +datum=WGS84 +units=m +no_defs ')
#### Cloud mask
# In this case, I will just omit negative values
#cloudmask_20180213 = Ts_raster
#cloudmask_20180213[cloudmask_20180213  < 0 ] = NA
# https://stackoverflow.com/questions/28366220/poor-resolution-of-raster-plot-when-output-to-file
#pdf('D:/Stenka_UWI/Topic_1/06_R_SCRIPTS/20190913_dayLST_derivation/20180213_LST_day_v2.pdf')
#plot(cloudmask_20180213, col=colorRampPalette(c("lightblue1", "navyblue", "forestgreen", 'yellow1', 'darkorange','red3', 'purple4'))(255), main = 'LST in Berlin (13 Feb 2018, 10:02 UTC)', legend.args = list(text='LST [°C]', line = 0.5, cex = 1, adj = 0.25), maxpixels=1e8 )
#dev.off()
#### save raster ####
# LST raster with no cloud mask
#writeRaster(Ts_raster,"D:/Stenka_UWI/UWI/2020/Ladwig/06_R_SCRIPTS/20200319_Feb_2018/20180213_LST_day.tif", options='COMPRESS=LZW')
### write a file with the calculated variables water vapour, atmospheric temperature; this might be helpful for later interpretation, i.e.
# when you have strange results
#table <- structure(list(Year = as.numeric(), Month = as.numeric(), Day=as.numeric(),w = as.numeric(),
#                      Ta = as.numeric(), t=as.numeric()),class = "data.frame")
#table[1,1] <- year
#table[1,2] <- month
#table[1,3] <- day
#table[1,4] <- w
#table[1,5] <- Ta
#table[1,6] <- t
#write.table(table,paste(outpath,'summary_',year,'_',month,'_',day,'.csv', sep=''), sep=';',row.names=F)
#write.table(df_thermal, 'df_thermal_June_2_2017.txt', sep=';')
statstemp <- structure(list(Mean = as.numeric(), SD = as.numeric(), Min=as.numeric(), Max = as.numeric(), Median = as.numeric(), quant25 = as.numeric(), quant75 = as.numeric()), class= "data.frame")
statstemp[1,1] <- mean(df_thermal$Ts_C, na.rm=TRUE) #Mean
statstemp[1,2] <- sd(df_thermal$Ts_C, na.rm = TRUE) #SD
statstemp[1,3] <- min(df_thermal$Ts_C, na.rm=TRUE) #Min
statstemp[1,4] <- max(df_thermal$Ts_C, na.rm=TRUE) #Max
statstemp[1,5] <- median(df_thermal$Ts_C, na.rm=TRUE) #Median
statstemp[1,6] <- quantile(df_thermal$Ts_C, probs=0.25, na.rm=TRUE) #quant25
statstemp[1,7] <- quantile(df_thermal$Ts_C, probs=0.75, na.rm=TRUE) #quant75
statstemp
#write.csv(statstemp, file = "D:/Stenka_UWI/Topic_1/06_R_SCRIPTS/20190829_LST_analyses/L8_LST_20180213_stats_temp_v1.csv")
plot(Ts_raster, col=colorRampPalette(c("lightblue1", "navyblue", "forestgreen", 'yellow1', 'darkorange','red3', 'purple4'))(255), main = 'LST in Berlin (13 Feb 2018, 10:02 UTC)', legend.args = list(text='LST [°C]', line = 0.5, cex = 1, adj = 0.25), maxpixels=1e8 )
# Subset to Lake Tegel
Tegel_20180213 <- crop(Ts_raster, extent(tegel_shape))  # subset to extent of Berlin shape (envelope)
Tegel_20180213 <- mask(Tegel_20180213,tegel_shape)   # mask out all pixels that do not lie within Berlin shape
pdf(paste0('/Users/robertladwig/Dropbox/Tegel-Logger/landsat/20200319_Ladwig/Code/',idx,'.pdf'))
plot(Tegel_20180213, col=colorRampPalette(c("lightblue1", "navyblue", "forestgreen", 'yellow1', 'darkorange','red3', 'purple4'))(255),
main = paste0('Lake Tegel surface temperature',' (',idx,')'), legend.args = list(text='[°C]', line = 0.5, cex = 1, adj = 0.25), maxpixels=1e8)
dev.off()
# What's the minimum pixel value?
minValue(Tegel_20180213)
}
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("MARSS")
install.packages("coda")
install.packages("R2jags")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
pkgbuild::has_build_tools(debug = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", type = "source")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
install.packages("rstan", type = "source")
remotes::install_github("stan-dev/rstan", ref = "develop",
subdir = "rstan/rstan", build_opts = "")
pkgbuild::has_build_tools(debug = TRUE)
R.version
install.packages("Rcpp", repos="https://rcppcore.github.io/drat")
10 + ( 1 * 1 /1 ^3 (2 * 10 - 5 * 8 + 4 * 8 - 4) (
10 + ( 1 * 1 /1 ^3 (2 * 10 - 5 * 8 + 4 * 8 - 4)
10 + ( 1 * 1 /1 ^3 (2 * 10 - 5 * 8 + 4 * 8 - 4) )
10 + ( 1 * 1 /1 ^3 (2 * 10 - 5 * 8 + 4 * 8 - 4) )
10 + (2*10 - 5 *8 + 4 *8 -4)
2*10 - 5 *8 + 4 *8 -4
2*10 - 5*8
4*8
1/100
1/100*24
1/100*24*3600
86400/100
864/60
10000/60
166/60
setwd("~/Documents/GLM/GLM_workshop")
# Author: Robert Ladwig
# Date: 10/01/2020
# Title: GLM Workshop
cat("\f")
rm(list = ls())
setwd('./example')
# Overview of files
list.files()
library(glmtools)
library(GLM3r)
library(rLakeAnalyzer)
library(tidyverse)
library(reshape2)
# Check out which R version we're using
glm_version()
# Example 1: calibrating GLM
glm_template = 'glm3-template.nml'
sim_folder <- getwd()
out_file <- file.path(sim_folder, "output","output.nc")
field_data <- file.path(sim_folder,"bcs","field_temp_oxy.csv")
file.copy(glm_template, 'glm3.nml', overwrite = TRUE)
nml_file <- file.path(sim_folder, 'glm3.nml')
#### Example 1: initial visualisations
# We are calibrating GLM only first because of shorter run times
plot_meteo('bcs/meteo.csv')
GLM3r::run_glm(sim_folder, verbose = T)
water_height <- get_surface_height(file = out_file)
ggplot(water_height, aes(DateTime, surface_height)) +
geom_line() +
ggtitle('Surface water level') +
xlab(label = '') + ylab(label = 'Water level (m)')
ice_thickness <- get_ice(file = out_file)
ggplot(ice_thickness, aes(DateTime, `ice(m)`)) +
geom_line() +
ggtitle('Ice') +
xlab(label = '') + ylab(label = 'Ice thickness (m)')
surface_temp <- get_var(file = out_file,
var_name = 'temp',
reference = 'surface',
z_out = 2)
ggplot(surface_temp, aes(DateTime, temp_2)) +
geom_line() +
ggtitle('Surface water temperature') +
xlab(label = '') + ylab(label = 'Temp. (deg C)')
bottom_temp <- get_var(file = out_file,
var_name = 'temp',
reference = 'surface',
z_out = 20)
ggplot(bottom_temp, aes(DateTime, temp_20)) +
geom_line() +
ggtitle('Bottom water temperature') +
xlab(label = '') + ylab(label = 'Temp. (deg C)')
plot_var_compare(nc_file = out_file,
field_file = field_data,
var_name = 'temp')
#### Example 2: thermal stratification
temp_rmse <- compare_to_field(nc_file = out_file,
field_file = field_data,
metric = 'water.temperature',
as_value = FALSE,
precision= 'hours')
print(paste('Total time period (uncalibrated):',round(temp_rmse,2),'deg C RMSE'))
var = 'temp'         # variable to which we apply the calibration procedure
path = getwd()       # simulation path/folder
nml_file = nml_file  # path of the nml configuration file that you want to calibrate on
glm_file = nml_file # # path of the gml configuration file
# which parameter do you want to calibrate? a sensitivity analysis helps
calib_setup <- data.frame('pars' = as.character(c('wind_factor','lw_factor','ch','sed_temp_mean',
'sed_temp_mean',
'coef_mix_hyp','Kw')),
'lb' = c(0.7,0.7,5e-4,3,8,0.6,0.1),
'ub' = c(2,2,0.002,8,20,0.4,0.8),
'x0' = c(1,1,0.0013,5,13,0.5,0.3))
print(calib_setup)
glmcmd = NULL        # command to be used, default applies the GLM3r function
# glmcmd = '/Users/robertladwig/Documents/AquaticEcoDynamics_gfort/GLM/glm'        # custom path to executable
# Optional variables
first.attempt = TRUE # if TRUE, deletes all local csv-files that stores the
#outcome of previous calibration runs
period = get_calib_periods(nml_file, ratio = 2) # define a period for the calibration,
# this supports a split-sample calibration (e.g. calibration and validation period)
# the ratio value is the ratio of calibration period to validation period
print(period)
scaling = TRUE       # scaling of the variables in a space of [0,10]; TRUE for CMA-ES
verbose = TRUE
method = 'CMA-ES'    # optimization method, choose either `CMA-ES` or `Nelder-Mead`
metric = 'RMSE'      # objective function to be minimized, here the root-mean square error
target.fit = 2.0     # refers to a target fit of 2.0 degrees Celsius (stops when RMSE is below that)
target.iter = 20    # refers to a maximum run of 20 calibration iterations (stops after that many runs)
plotting = TRUE      # if TRUE, script will automatically save the contour plots
output = out_file    # path of the output file
field_file = field_data # path of the field data
conversion.factor = 1
calibrate_sim(var = 'temp', path = getwd(),
field_file = field_file,
nml_file = nml_file,
glm_file = glm_file,
calib_setup = calib_setup,
glmcmd = NULL, first.attempt = TRUE,
period = period,
scaling = TRUE, method = 'CMA-ES', metric = 'RMSE',
target.fit = 2.0, target.iter = 20,
plotting = TRUE,
output = output,
verbose = TRUE,
conversion.factor = 1)
glm_version()
#### Example 3: water quality
# Is parameterising water quality feasible using automatic optimization techniques? See:
# Mi et al 2020: The formation of a metalimnetic oxygen minimum exemplifies how ecosystem dynamics shape biogeochemical processes: A modelling study
# Fenocchi et al 2019: Applicability of a one-dimensional coupled ecological-hydrodynamic numerical model to future projections in a very deep large lake (Lake Maggiore, Northern Italy/Southern Switzerland)
plot_var(nc_file = out_file,
var_name = 'OXY_oxy')
plot_var(nc_file = out_file,
var_name = 'PHS_frp')
plot_var(nc_file = out_file,
var_name = 'NIT_nit')
aed_template = 'aed2/aed2-template.nml'
file.copy(aed_template, 'aed2/aed2.nml', overwrite = TRUE)
nml_file <- file.path(sim_folder, 'aed2/aed2.nml')
calib_setup <- data.frame('pars' = as.character(c('Fsed_oxy','Ksed_oxy','theta_sed_oxy')),
'lb' = c(-150, 10, 1.05),
'ub' = c(10,70,1.10),
'x0' = c(-100, 50, 1.08))
calibrate_sim(var = 'OXY_oxy', path = getwd(),
field_file = field_file,
nml_file = nml_file,
glm_file = glm_file,
calib_setup = calib_setup,
glmcmd = NULL, first.attempt = FALSE,
period = period,
scaling = TRUE, method = 'CMA-ES', metric = 'RMSE',
target.fit = 3.0, target.iter = 20,
plotting = TRUE,
output = output,
verbose = TRUE,
conversion.factor = 32/1000)
?run_gm
?GLM3r::run_glm
getwd()
system2('/Users/robertladwig/Documents/AquaticEcoDynamics_v310/GLM/glm')
system2('/Users/robertladwig/Documents/AquaticEcoDynamics_v310/GLM/glm')
plot_var(nc_file = out_file, var_name = 'PHS_frp',reference = 'surface')
water_height <- get_surface_height(file = out_file)
ggplot(water_height, aes(DateTime, surface_height)) +
geom_line() +
ggtitle('Surface water level') +
xlab(label = '') + ylab(label = 'Water level (m)')
ice_thickness <- get_ice(file = out_file)
ggplot(ice_thickness, aes(DateTime, `ice(m)`)) +
geom_line() +
ggtitle('Ice') +
xlab(label = '') + ylab(label = 'Ice thickness (m)')
system2('/Users/robertladwig/Documents/AquaticEcoDynamics_v310/GLM/glm')
system2('/Users/robertladwig/Documents/AquaticEcoDynamics_v310/GLM/glm')
system2('/Users/robertladwig/Documents/AquaticEcoDynamics_v310/GLM/glm')
system2('/Users/robertladwig/Documents/AquaticEcoDynamics_v310/GLM/glm')
system2('/Users/robertladwig/Documents/AquaticEcoDynamics_v310/GLM/glm')
system2('/Users/robertladwig/Documents/AquaticEcoDynamics_v310/GLM/glm')
system2('/Users/robertladwig/Documents/AquaticEcoDynamics_v310/GLM/glm')
plot_var(nc_file = out_file, var_name = 'PHS_frp',reference = 'surface')
plot_var(nc_file = out_file, var_name = 'NIT_nit',reference = 'surface')
plot_var(nc_file = out_file, var_name = 'SIL_rsi',reference = 'surface')
plot_var(nc_file = out_file, var_name = 'PHY_cyano',reference = 'surface')
plot_var(nc_file = out_file, var_name = 'PHY_diatom', reference = 'surface')
x <- get_var(file = out_file,
var_name = 'PHY_cyano',
reference = 'surface',
z_out = 10)
ggplot(x, aes(DateTime, PHY_cyano_10)) +
geom_line() +
ggtitle('Surface water temperature') +
xlab(label = '') + ylab(label = 'Temp. (deg C)')
GLM3r::run_glm(sim_folder, verbose = T)
system2('/Users/robertladwig/Documents/AquaticEcoDynamics_v310/GLM/glm')
x <- get_var(file = out_file,
var_name = 'PHY_cyano',
reference = 'surface',
z_out = 10)
ggplot(x, aes(DateTime, PHY_cyano_10)) +
geom_line() +
ggtitle('Surface water temperature') +
xlab(label = '') + ylab(label = 'Temp. (deg C)')
plot_var(nc_file = out_file, var_name = 'PHY_cyano',reference = 'surface')
plot_var(nc_file = out_file, var_name = 'PHY_diatom', reference = 'surface')
plot_var(nc_file = out_file, var_name = 'PHS_frp',reference = 'surface')
plot_var(nc_file = out_file, var_name = 'NIT_nit',reference = 'surface')
plot_var(nc_file = out_file, var_name = 'SIL_rsi',reference = 'surface')
plot_var(nc_file = out_file, var_name = 'PHY_cyano',reference = 'surface')
plot_var(nc_file = out_file, var_name = 'PHY_diatom', reference = 'surface')
system2('/Users/robertladwig/Documents/AquaticEcoDynamics_v310/GLM/glm')
plot_var(nc_file = out_file, var_name = 'PHY_diatom', reference = 'surface')
GLM3r::run_glm(sim_folder, verbose = T)
x <- get_var(file = out_file,
var_name = 'PHY_cyano',
reference = 'surface',
z_out = 10)
ggplot(x, aes(DateTime, PHY_cyano_10)) +
geom_line() +
ggtitle('Surface water temperature') +
xlab(label = '') + ylab(label = 'Temp. (deg C)')
# Check out which R version we're using
glm_version()
phyto_list <- get_nml_value(aed_nml,arg_name = 'aed2_phytoplankton::dbase')
path_phyto <- phyto_list
phyto_nml <- read_nml(path_phyto)
phyto_nam <- get_nml_value(phyto_nml,arg_name = 'pd%p_name')
names <- unlist(strsplit(phyto_nam, ","))
lim_attributes <- c('fI', 'fNit', 'fPho', 'fSil', 'fT', 'fSal')
plist <- list()
pindex <- 1
for (ii in seq_len(length(names))){
for (jj in seq_len(length(lim_attributes))){
p1 <- plot_var(nc_file = out_file, var_name = paste0('PHY_',names[ii],'_',
lim_attributes[jj]),
legend.title = paste(names[ii], lim_attributes[jj]))
plist[[pindex]] <- p1
pindex <- pindex + 1
}
}
p_cyano <- plist[[1]] / plist[[2]] / plist[[3]] / plist[[4]] / plist[[5]] / plist[[6]]
p_diatom <- plist[[7]] / plist[[8]] / plist[[9]] / plist[[10]] / plist[[11]] / plist[[12]]
p_cyano
aed_nml
# Example 4: phytoplankton
# Advice for calibrating phytoplankton functional groups, investigate the
# limitation functions
aed_nml <- read_nml(aed_file)
aed_file
# Example 4: phytoplankton
# Advice for calibrating phytoplankton functional groups, investigate the
# limitation functions
aed_nml <- read_nml('aed2/aed2.nml')
phyto_list <- get_nml_value(aed_nml,arg_name = 'aed2_phytoplankton::dbase')
path_phyto <- phyto_list
phyto_nml <- read_nml(path_phyto)
phyto_nam <- get_nml_value(phyto_nml,arg_name = 'pd%p_name')
names <- unlist(strsplit(phyto_nam, ","))
lim_attributes <- c('fI', 'fNit', 'fPho', 'fSil', 'fT', 'fSal')
plist <- list()
pindex <- 1
for (ii in seq_len(length(names))){
for (jj in seq_len(length(lim_attributes))){
p1 <- plot_var(nc_file = out_file, var_name = paste0('PHY_',names[ii],'_',
lim_attributes[jj]),
legend.title = paste(names[ii], lim_attributes[jj]))
plist[[pindex]] <- p1
pindex <- pindex + 1
}
}
p_cyano <- plist[[1]] / plist[[2]] / plist[[3]] / plist[[4]] / plist[[5]] / plist[[6]]
p_cyano
plot_var(nc_file = out_file, var_name = 'PHY_cyano',reference = 'surface')
x <- get_var(file = out_file,
var_name = 'PHY_cyano',
reference = 'surface',
z_out = 2)
ggplot(x, aes(DateTime, PHY_cyano_2)) +
geom_line() +
ggtitle('Cyanobacteria functional group') +
xlab(label = '') + ylab(label = '(mmol/m3)')
surface_diatom <- get_var(file = out_file,
var_name = 'PHY_diatom',
reference = 'surface',
z_out = 2)
ggplot(surface_diatom, aes(DateTime, PHY_cyano_2)) +
geom_line() +
ggtitle('Diatoms functional group') +
xlab(label = '') + ylab(label = '(mmol/m3)')
ggplot(surface_diatom, aes(DateTime, PHY_diatom_2)) +
geom_line() +
ggtitle('Diatoms functional group') +
xlab(label = '') + ylab(label = '(mmol/m3)')
# read example configuration into memory
eg_nml <- read_nml(nml_file = file.path(sim_folder,'glm3.nml'))
eg_nml
class(eg_nml)
names(eg_nml)
eg_nml[[1]][1:4]
# read and change values inside the namelist file
get_nml_value(eg_nml, 'Kw')
nml_file
eg_nml <- set_nml(eg_nml, 'Kw', 1.4)
get_nml_value(eg_nml, 'Kw')
#
plot_var(nc_file = out_file,
var_name = 'temp')
